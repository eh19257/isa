// Initialise Vector 1 in memory

LDI r0 10
LDI r1 21
LDI r2 22
LDI r3 23
LDI r4 24
STOI 0 r0
STOI 1 r1
STOI 2 r2
STOI 3 r3
STOI 4 r4

// Initialise Vector 2 in memory

LDI r0 10
LDI r1 11
LDI r2 12
LDI r3 13
LDI r4 14
STOI 6 r0
STOI 7 r1
STOI 8 r2
STOI 9 r3
STOI 10 r4

// Clean registers (not needed)

LDI r0 0
LDI r1 0
LDI r2 0
LDI r3 0
LDI r4 0

// Actually carry out the addition

// Index
LDI r0 0

// Vector 2 offset
LDI r1 6

// Vector result offset
LDI r2 12

// Size of vectors
LDI r3 5

// Branch to jump to 
LDI r4 40

CMP r5 r0 r3
BZ r4 r5

// Add Elements
LD r6 r0
LDA r7 r1 r0
ADD r8 r6 r7

// Calculate result position
ADD r9 r0 r2
STO r9 r8

// Increment Index
ADDI r0 r0 1

// Jumps back
LDI r10 30
JMP r10

NOP

NOP
NOP
NOP
NOP
NOP

HALT
